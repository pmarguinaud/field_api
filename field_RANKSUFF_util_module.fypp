MODULE FIELD_${RANK}$${SUFF}$_UTIL_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (ranks=[RANK], kinds=['JP' + SUFF])

USE FIELD_MODULE
USE FIELD_ACCESS_MODULE

IMPLICIT NONE

#:for method in ['LOAD', 'SAVE', 'DIFF', 'COPY', 'WIPE', 'HOST']
INTERFACE ${method}$
#:for ft in fieldTypeList
  MODULE PROCEDURE ${method}$_${ft.name}$
#:if method not in ['DIFF']
  MODULE PROCEDURE ${method}$_${ft.name}$_PTR
  MODULE PROCEDURE ${method}$_${ft.name}$_VIEW
#:endif
#:endfor
END INTERFACE

#:endfor


CONTAINS

#:for ft in fieldTypeList
SUBROUTINE LOAD_${ft.name}$ (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$), POINTER :: YD
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE

SUBROUTINE SAVE_${ft.name}$ (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$), POINTER :: YD
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE

SUBROUTINE DIFF_${ft.name}$ (CDMESS, YD, YO)
CHARACTER (LEN=*), INTENT(IN) :: CDMESS
CLASS (${ft.name}$), POINTER :: YD, YO
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE

SUBROUTINE COPY_${ft.name}$ (SELF, LDCREATED)
CLASS (${ft.name}$), POINTER :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDCREATED
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE 

SUBROUTINE WIPE_${ft.name}$ (SELF, LDDELETED)
CLASS (${ft.name}$) :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDDELETED
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE 

SUBROUTINE HOST_${ft.name}$ (SELF)
CLASS (${ft.name}$), POINTER :: SELF

CALL SELF%SYNC_HOST_RDWR ()

END SUBROUTINE 

SUBROUTINE LOAD_${ft.name}$_VIEW (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$_VIEW) :: YD
! Do nothing
END SUBROUTINE

SUBROUTINE SAVE_${ft.name}$_VIEW (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$_VIEW) :: YD
! Do nothing
END SUBROUTINE

SUBROUTINE COPY_${ft.name}$_VIEW (SELF, LDCREATED)
CLASS (${ft.name}$_VIEW) :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDCREATED
! Do nothing
END SUBROUTINE 

SUBROUTINE WIPE_${ft.name}$_VIEW (SELF, LDDELETED)
CLASS (${ft.name}$_VIEW) :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDDELETED
! Do nothing
END SUBROUTINE 

SUBROUTINE HOST_${ft.name}$_VIEW (SELF)
CLASS (${ft.name}$_VIEW) :: SELF
! Do nothing
END SUBROUTINE 

SUBROUTINE LOAD_${ft.name}$_PTR (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$_PTR) :: YD
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE

SUBROUTINE SAVE_${ft.name}$_PTR (KLUN, YD)
INTEGER (KIND=JPIM), INTENT (IN) :: KLUN
CLASS (${ft.name}$_PTR) :: YD
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE

SUBROUTINE COPY_${ft.name}$_PTR (SELF, LDCREATED)
CLASS (${ft.name}$_PTR) :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDCREATED
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE 

SUBROUTINE WIPE_${ft.name}$_PTR (SELF, LDDELETED)
CLASS (${ft.name}$_PTR) :: SELF
LOGICAL, INTENT (IN), OPTIONAL :: LDDELETED
#include "abor1.intfb.h"
CALL ABOR1 ('NOT IMPLEMENTED')
END SUBROUTINE 

SUBROUTINE HOST_${ft.name}$_PTR (SELF)
CLASS (${ft.name}$_PTR) :: SELF

IF (ASSOCIATED (SELF%PTR)) THEN
  CALL HOST (SELF%PTR)
ENDIF

END SUBROUTINE 

#:endfor

END MODULE
