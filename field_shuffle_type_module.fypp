#! (C) Copyright 2022- ECMWF.
#! (C) Copyright 2022- Meteo-France.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.

MODULE FIELD_SHUFFLE_TYPE_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (hasView=True)

USE FIELD_MODULE
USE FIELD_ACCESS_MODULE
USE FIELD_FACTORY_MODULE
${fieldType.useParkind1 ()}$

#:for ft in fieldTypeList
USE ${ft.name}$_SHUFFLE_MODULE
#:endfor

IMPLICIT NONE

PRIVATE

TYPE FIELD_SHUFFLE
  INTEGER (KIND=JPIM) :: KGPBLKS_G = -1, KLON_G = -1, KGPTOT_G = -1
  INTEGER (KIND=JPIM) :: KGPBLKS_S = -1, KLON_S = -1, KGPTOT_S = -1
  INTEGER (KIND=JPIM) :: KGPBLKS   = -1, KLON   = -1, KGPTOT   = -1 ! alias for KGPBLKS, KLON, KGPTOT
  LOGICAL :: LFULL = .FALSE.  ! No need to gather/scatter, all columns are OK, return pointers based on original fields
  LOGICAL :: LNULL = .FALSE.  ! No need to gather/scatter, all columns are KO, return pointers on empty arrays
  CLASS (FIELD_3IM), POINTER :: YLFINDS => NULL ()
#:for ft in fieldTypeList
  TYPE (${ft.name}$_SHUFFLE_PAIR), POINTER :: ${ft.name}$_LIST => NULL ()
#:endfor
CONTAINS
  GENERIC :: INIT => INIT_FIELD_SHUFFLE
  PROCEDURE :: INIT_FIELD_SHUFFLE
  PROCEDURE :: SCATTER => SCATTER_FIELD_SHUFFLE
END TYPE FIELD_SHUFFLE

PUBLIC :: FIELD_SHUFFLE

INTEGER (KIND=JPIM), PARAMETER :: NLONDIM = 1, NBLKDIM = 2

CONTAINS

SUBROUTINE INIT_FIELD_SHUFFLE (SELF, KGPTOT, KLON_S, KLON_G, KBLKOFF)

USE FIELD_ABORT_MODULE

CLASS (FIELD_SHUFFLE) :: SELF
INTEGER (KIND=JPIM), INTENT (IN) :: KGPTOT
INTEGER (KIND=JPIM), INTENT (IN) :: KLON_S, KLON_G
INTEGER (KIND=JPIM), INTENT (IN), OPTIONAL :: KBLKOFF

INTEGER (KIND=JPIM), POINTER :: INDS (:,:,:)
INTEGER (KIND=JPIM) :: JLONS, JBLKS, JLONG, JBLKG, I1S, I2S
INTEGER (KIND=JPIM) :: IBLKOFF

IBLKOFF = 1
IF (PRESENT (KBLKOFF)) IBLKOFF = KBLKOFF

SELF%KGPTOT_S  = KGPTOT
SELF%KLON_S    = KLON_S
SELF%KGPBLKS_S = (SELF%KGPTOT_S+SELF%KLON_S-1) / SELF%KLON_S

SELF%KGPTOT_G  = KGPTOT
SELF%KLON_G    = KLON_G
SELF%KGPBLKS_G = (SELF%KGPTOT_G+SELF%KLON_G-1) / SELF%KLON_G

SELF%KGPTOT  =  SELF%KGPTOT_G 
SELF%KLON    =  SELF%KLON_G   
SELF%KGPBLKS =  SELF%KGPBLKS_G

CALL FIELD_NEW (SELF%YLFINDS, UBOUNDS=[2, SELF%KLON_G, SELF%KGPBLKS_G], PERSISTENT=.TRUE.)
INDS => GET_HOST_DATA_RDWR (SELF%YLFINDS)

! Create indices (serial code)

JBLKG = 1
JLONG = 1
DO JBLKS = 1, SELF%KGPBLKS_S
  DO JLONS = 1, MIN (SELF%KLON_S, SELF%KGPTOT_S - (JBLKS - 1) * SELF%KLON_S)
    INDS (NLONDIM, JLONG, JBLKG) = JLONS
    INDS (NBLKDIM, JLONG, JBLKG) = JBLKS + IBLKOFF-1
    JLONG = JLONG + 1
    IF (JLONG > SELF%KLON_G) THEN
      JLONG = 1
      JBLKG = JBLKG + 1
    ENDIF
  ENDDO
ENDDO

IF (JBLKG <= SIZE (INDS, 3)) THEN
  DO WHILE (JLONG <= SELF%KLON_G)
    INDS (NLONDIM, JLONG, JBLKG) = -9999999
    INDS (NBLKDIM, JLONG, JBLKG) = -9999999
    JLONG = JLONG + 1
  ENDDO
ENDIF

END SUBROUTINE

SUBROUTINE SCATTER_FIELD_SHUFFLE (SELF)
CLASS (FIELD_SHUFFLE) :: SELF
#:for ft in fieldTypeList
TYPE (${ft.name}$_SHUFFLE_PAIR), POINTER :: ${ft.name}$_LIST, ${ft.name}$_NEXT
#:endfor

IF (SELF%LNULL) THEN
  ! Do nothing
ELSEIF (SELF%LFULL) THEN
  ! Do nothing
ELSE

#:for ft in fieldTypeList
  CALL PAIR_SCATTER_DATA (SELF%${ft.name}$_LIST, SELF%YLFINDS)

#:endfor

  CALL FIELD_DELETE (SELF%YLFINDS)

ENDIF

SELF%YLFINDS => NULL ()
SELF%KGPBLKS_G = -1 
SELF%KLON_G = -1 
SELF%KGPTOT_G = -1
SELF%KGPBLKS_S = -1 
SELF%KLON_S = -1 
SELF%KGPTOT_S = -1

SELF%KGPTOT  =  -1
SELF%KLON    =  -1
SELF%KGPBLKS =  -1


END SUBROUTINE

END MODULE FIELD_SHUFFLE_TYPE_MODULE
