#! (C) Copyright 2022- ECMWF.
#! (C) Copyright 2022- Meteo-France.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.

MODULE FIELD_${RANK}$${SUFF}$_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (ranks=[RANK], kinds=['JP' + str (SUFF)])

USE OML_MOD, ONLY: OML_MAX_THREADS , OML_MY_THREAD
USE IEEE_ARITHMETIC, ONLY: IEEE_SIGNALING_NAN
USE DEV_ALLOC_MODULE
USE FIELD_BASIC_MODULE
USE FIELD_INIT_DEBUG_VALUE_MODULE
USE FIELD_CONSTANTS_MODULE
${fieldType.useParkind1 ()}$

IMPLICIT NONE

PRIVATE

#:for ft in fieldTypeList
#:set ftn = ft.name
TYPE, ABSTRACT, EXTENDS (FIELD_BASIC) :: ${ftn}$
  ${ft.type}$, POINTER :: PTR(${ft.shape}$) => NULL()
  ${ft.type}$, POINTER, CONTIGUOUS :: DEVPTR(${ft.shape}$) => NULL()
CONTAINS

  PROCEDURE :: FINAL => ${ftn}$_FINAL
  PROCEDURE :: ${ftn}$_FINAL
  PROCEDURE :: DELETE_DEVICE_DATA => ${ftn}$_DELETE_DEVICE_DATA
  PROCEDURE :: GET_VIEW => ${ftn}$_GET_VIEW
  PROCEDURE :: GET_DEVICE_DATA_RDONLY => ${ftn}$_GET_DEVICE_DATA_RDONLY
  PROCEDURE :: GET_DEVICE_DATA_RDWR => ${ftn}$_GET_DEVICE_DATA_RDWR
  PROCEDURE :: GET_HOST_DATA_RDONLY => ${ftn}$_GET_HOST_DATA_RDONLY
  PROCEDURE :: GET_HOST_DATA_RDWR => ${ftn}$_GET_HOST_DATA_RDWR
  PROCEDURE :: SYNC_HOST_RDWR => ${ftn}$_SYNC_HOST_RDWR
  PROCEDURE :: SYNC_HOST_RDONLY => ${ftn}$_SYNC_HOST_RDONLY
  PROCEDURE :: SYNC_DEVICE_RDWR => ${ftn}$_SYNC_DEVICE_RDWR
  PROCEDURE :: SYNC_DEVICE_RDONLY => ${ftn}$_SYNC_DEVICE_RDONLY
  PROCEDURE :: COPY_OBJECT => ${ftn}$_COPY_OBJECT
  PROCEDURE :: WIPE_OBJECT => ${ftn}$_WIPE_OBJECT
  PROCEDURE(GET_DIMS), DEFERRED :: GET_DIMS
  PROCEDURE(RESIZE), DEFERRED :: RESIZE

  PROCEDURE :: GET_DEVICE_DATA => ${ftn}$_GET_DEVICE_DATA
  PROCEDURE :: GET_HOST_DATA => ${ftn}$_GET_HOST_DATA
  PROCEDURE :: ${ftn}$_GET_HOST_DATA
  PROCEDURE :: ${ftn}$_GET_DEVICE_DATA
  PROCEDURE, PRIVATE :: COPY_DATA =>  ${ftn}$_COPY_DATA
  PROCEDURE :: CREATE_DEVICE_DATA => ${ftn}$_CREATE_DEVICE_DATA
#ifdef __PGI
! PGI bug (nvhpc/23.09, nvhpc/23.11), submitted to NVIDIA
  PROCEDURE :: SET_STATUS => ${ftn}$_SET_STATUS
  PROCEDURE :: GET_STATUS => ${ftn}$_GET_STATUS
  PROCEDURE :: SET_DEVICE_DIRTY => ${ftn}$_SET_DEVICE_DIRTY
#endif
END TYPE ${ftn}$

ABSTRACT INTERFACE
  SUBROUTINE GET_DIMS(SELF, LBOUNDS, UBOUNDS)
    ${fieldType.useParkind1 ()}$
    IMPORT ::  ${ftn}$
    CLASS(${ftn}$),               INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: LBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: UBOUNDS(${ft.rank}$)
  END SUBROUTINE GET_DIMS
  SUBROUTINE RESIZE (SELF, UBOUNDS, LBOUNDS, PERSISTENT)
    ${fieldType.useParkind1 ()}$
    IMPORT ::  ${ftn}$
    CLASS(${ftn}$),               INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: UBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS(${ft.rank}$)
    LOGICAL, OPTIONAL,            INTENT(IN) :: PERSISTENT
  END SUBROUTINE RESIZE
END INTERFACE

PUBLIC :: ${ftn}$

TYPE, EXTENDS(${ftn}$) :: ${ftn}$_WRAPPER
CONTAINS
  PROCEDURE :: INIT => ${ftn}$_WRAPPER_INIT
  PROCEDURE :: FINAL => ${ftn}$_WRAPPER_FINAL
  PROCEDURE :: GET_DIMS => ${ftn}$_WRAPPER_GET_DIMS
  PROCEDURE :: RESIZE => ${ftn}$_WRAPPER_RESIZE
END TYPE ${ftn}$_WRAPPER

PUBLIC :: ${ftn}$_WRAPPER

TYPE, EXTENDS(${ftn}$) :: ${ftn}$_OWNER
  INTEGER(KIND=JPIM) :: LBOUNDS(${ft.rank}$), UBOUNDS(${ft.rank}$)
  LOGICAL :: HAS_INIT_VALUE = .FALSE.
  ${ft.type}$ :: INIT_VALUE
CONTAINS
  PROCEDURE :: INIT => ${ftn}$_OWNER_INIT
  PROCEDURE :: FINAL => ${ftn}$_OWNER_FINAL
  PROCEDURE :: CREATE_HOST_DATA => ${ftn}$_CREATE_HOST_DATA
  PROCEDURE :: GET_HOST_DATA => ${ftn}$_OWNER_GET_HOST_DATA
  PROCEDURE :: GET_DEVICE_DATA => ${ftn}$_OWNER_GET_DEVICE_DATA
  PROCEDURE :: GET_DIMS => ${ftn}$_OWNER_GET_DIMS
  PROCEDURE :: RESIZE => ${ftn}$_OWNER_RESIZE
END TYPE ${ftn}$_OWNER

PUBLIC :: ${ftn}$_OWNER

TYPE ${ftn}$_PTR
  CLASS(${ftn}$), POINTER :: PTR => NULL()
END TYPE ${ftn}$_PTR

PUBLIC :: ${ftn}$_PTR

TYPE ${ftn}$_VIEW
  ${ft.type}$, POINTER :: P(${ft.viewShape}$) => NULL()
END TYPE ${ftn}$_VIEW

PUBLIC :: ${ftn}$_VIEW

#:endfor

CONTAINS

#:for ft in fieldTypeList
#:set ftn = ft.name
  SUBROUTINE ${ftn}$_WRAPPER_INIT(SELF, DATA, PERSISTENT, LBOUNDS)

    USE FIELD_ABORT_MODULE

    ! Create FIELD object by wrapping existing data
    CLASS(${ftn}$_WRAPPER) :: SELF
    ${ft.type}$, TARGET, INTENT(IN) :: DATA(${ft.shape}$)
    LOGICAL, INTENT(IN), OPTIONAL :: PERSISTENT
    INTEGER(KIND=JPIM), INTENT(IN), OPTIONAL :: LBOUNDS(${ft.rank}$)
    LOGICAL :: LLPERSISTENT

    LLPERSISTENT = .TRUE.
    IF (PRESENT (PERSISTENT)) LLPERSISTENT = PERSISTENT

    IF (PRESENT(LBOUNDS)) THEN
      SELF%PTR(${ft.lbptr}$) => DATA
    ELSE
      SELF%PTR => DATA
    ENDIF
    SELF%THREAD_BUFFER = .NOT. LLPERSISTENT
    CALL SELF%SET_STATUS (NHSTFRESH)

    IF (.NOT. LLPERSISTENT) THEN
      IF (OML_MAX_THREADS () /= SIZE (DATA, ${ft.rank}$)) THEN
        CALL FIELD_ABORT ('${ftn}$_WRAPPER_INIT: DIMENSION MISMATCH')
      ENDIF
    ENDIF

  END SUBROUTINE ${ftn}$_WRAPPER_INIT

  SUBROUTINE ${ftn}$_OWNER_INIT (SELF, LBOUNDS, UBOUNDS, PERSISTENT, DELAYED, INIT_VALUE)
    CLASS(${ftn}$_OWNER) :: SELF
    INTEGER(KIND=JPIM), INTENT(IN), OPTIONAL :: LBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS(${ft.rank}$)
    LOGICAL, OPTIONAL,  INTENT(IN) :: PERSISTENT
    LOGICAL, OPTIONAL,  INTENT(IN) :: DELAYED
    ${ft.type}$, OPTIONAL, INTENT(IN) :: INIT_VALUE
    LOGICAL :: IS_DELAYED

    IS_DELAYED = .FALSE.
    IF(PRESENT(DELAYED))THEN
      IS_DELAYED = DELAYED
    ENDIF

    IF (PRESENT (LBOUNDS)) THEN
      SELF%LBOUNDS=LBOUNDS
    ELSE
      SELF%LBOUNDS=1
    ENDIF
    SELF%UBOUNDS=UBOUNDS
    SELF%UBOUNDS(${ft.rank}$) = OML_MAX_THREADS ()

    ! By default we allocate thread-local temporaries
    SELF%THREAD_BUFFER = .TRUE.

    SELF%LAST_CONTIGUOUS_DIMENSION = ${ft.rank}$

    IF (PRESENT(PERSISTENT)) THEN
      IF (PERSISTENT) THEN
        SELF%THREAD_BUFFER = .FALSE.
        SELF%LBOUNDS(${ft.rank}$) = 1
        SELF%UBOUNDS(${ft.rank}$) = UBOUNDS(${ft.rank}$)
      END IF
    END IF

    CALL SELF%SET_STATUS (UNALLOCATED)
    IF (PRESENT(INIT_VALUE)) THEN
      SELF%HAS_INIT_VALUE=.TRUE.
      SELF%INIT_VALUE=INIT_VALUE
    ELSE IF(USE_INIT_DEBUG_VALUE) THEN
      SELF%HAS_INIT_VALUE=.TRUE.
      SELF%INIT_VALUE=INIT_DEBUG_VALUE_${ft.kind}$
    ENDIF
    IF(.NOT. IS_DELAYED) THEN
      CALL SELF%CREATE_HOST_DATA ()
      IF (SELF%HAS_INIT_VALUE) THEN
        SELF%PTR=SELF%INIT_VALUE
        CALL SELF%SET_STATUS (NHSTFRESH)
      ENDIF
    ENDIF
  END SUBROUTINE ${ftn}$_OWNER_INIT

  SUBROUTINE ${ftn}$_CREATE_HOST_DATA (SELF)
    ! Create FIELD object by explicitly allocating new data
    CLASS(${ftn}$_OWNER) :: SELF

    IF (.NOT. ASSOCIATED (SELF%PTR)) THEN
      ALLOCATE(SELF%PTR(${', '.join(map(lambda r: 'SELF%LBOUNDS('+str(r+1)+'):SELF%UBOUNDS('+str(r+1)+')', range(0, ft.rank)))}$))
    ENDIF

    CALL SELF%SET_STATUS (UNINITIALIZED)

  END SUBROUTINE ${ftn}$_CREATE_HOST_DATA

  FUNCTION ${ftn}$_GET_VIEW(SELF, BLOCK_INDEX, ZERO) RESULT(VIEW_PTR)

    USE FIELD_ABORT_MODULE

    CLASS(${ftn}$) :: SELF
    ${ft.type}$, POINTER :: VIEW_PTR(${ft.viewShape}$)
    INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
    LOGICAL, OPTIONAL,  INTENT(IN) :: ZERO
    INTEGER(KIND=JPIM) :: IDX
    INTEGER(KIND=JPIM) :: LBOUNDS(${ft.rank}$)

    IF(IAND (SELF%GET_STATUS (),NHSTFRESH) /= NHSTFRESH) THEN
      CALL FIELD_ABORT ("GET_VIEW WAS CALLED, BUT DATA IS NOT PRESENT ON HOST")
    ENDIF

    IDX = BLOCK_INDEX
    IF (SELF%THREAD_BUFFER) IDX = OML_MY_THREAD ()

    LBOUNDS=LBOUND(SELF%PTR)
    VIEW_PTR(${','.join('LBOUNDS(%d):'%(r+1) for r in range(ft.viewRank))}$) => SELF%PTR(${','.join(':' for _ in range(ft.viewRank))}$,IDX)

    IF (PRESENT(ZERO)) THEN
      IF (ZERO) VIEW_PTR(${ft.viewShape}$) = ${ft.default}$
    END IF

    CALL SELF%SET_DEVICE_DIRTY ()

  END FUNCTION ${ftn}$_GET_VIEW

  SUBROUTINE ${ftn}$_DELETE_DEVICE_DATA(SELF)
    ! Delete the copy of this field on GPU device
    CLASS(${ftn}$) :: SELF

    IF (ASSOCIATED (SELF%DEVPTR)) THEN
      CALL DEV_DEALLOCATE (SELF%DEVPTR)
    ENDIF

  END SUBROUTINE ${ftn}$_DELETE_DEVICE_DATA

  SUBROUTINE ${ftn}$_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${ftn}$) :: SELF
    NULLIFY(SELF%PTR)
    CALL SELF%DELETE_DEVICE_DATA()
  END SUBROUTINE ${ftn}$_FINAL

  SUBROUTINE ${ftn}$_WRAPPER_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${ftn}$_WRAPPER) :: SELF
    ${ft.type}$, POINTER :: PTR(${ft.shape}$)
    CALL SELF%GET_HOST_DATA_RDONLY(PTR)
    CALL SELF%${ftn}$_FINAL
  END SUBROUTINE ${ftn}$_WRAPPER_FINAL

  SUBROUTINE ${ftn}$_OWNER_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${ftn}$_OWNER) :: SELF
    IF (ASSOCIATED(SELF%PTR)) THEN
      DEALLOCATE(SELF%PTR)
    END IF
    CALL SELF%${ftn}$_FINAL
  END SUBROUTINE ${ftn}$_OWNER_FINAL

  SUBROUTINE ${ftn}$_COPY_OBJECT (SELF, LDCREATED)

  USE FIELD_ABORT_MODULE

  CLASS(${ftn}$) :: SELF
  LOGICAL, INTENT (IN), OPTIONAL :: LDCREATED
  LOGICAL :: LLCREATED

  LLCREATED = .FALSE.
  IF (PRESENT (LDCREATED)) LLCREATED = LDCREATED

  IF (.NOT. LLCREATED) CALL FIELD_ABORT ('${ftn}$_COPY_OBJECT: OBJECT WAS NOT CREATED')

  IF (.NOT. SELF%LOBJECT_COPIED) THEN
    SELF%LOBJECT_COPIED = .TRUE.
#ifdef _OPENACC
    IF (ASSOCIATED (SELF%DEVPTR)) THEN
      !$acc enter data attach (SELF%DEVPTR)
    ENDIF
#endif
  ENDIF

  END SUBROUTINE ${ftn}$_COPY_OBJECT

  SUBROUTINE ${ftn}$_WIPE_OBJECT (SELF, LDDELETED)

  USE FIELD_ABORT_MODULE

  CLASS(${ftn}$) :: SELF
  LOGICAL, INTENT (IN), OPTIONAL :: LDDELETED
  LOGICAL :: LLDELETED

  LLDELETED = .FALSE.
  IF (PRESENT (LDDELETED)) LLDELETED = LDDELETED

  IF (.NOT. LLDELETED) CALL FIELD_ABORT ('${ftn}$_WIPE_OBJECT: OBJECT WAS NOT DELETED')

  IF (SELF%LOBJECT_COPIED) THEN
    SELF%LOBJECT_COPIED = .FALSE.
#ifdef _OPENACC
    IF (ASSOCIATED (SELF%DEVPTR)) THEN
      !$acc exit data detach (SELF%DEVPTR)
    ENDIF
#endif
  ENDIF

  END SUBROUTINE ${ftn}$_WIPE_OBJECT

  SUBROUTINE ${ftn}$_COPY_DATA (SELF, KDIR, QUEUE)
  USE ${ftn}$_DATA_MODULE
  CLASS(${ftn}$) :: SELF
  INTEGER (KIND=JPIM),           INTENT(IN) :: KDIR
  INTEGER (KIND=JPIM), OPTIONAL, INTENT(IN) :: QUEUE
  REAL :: START, FINISH

  SELF%LAST_CONTIGUOUS_DIMENSION = ${ftn}$_GET_LAST_CONTIGUOUS_DIMENSION (SELF%PTR)

  CALL CPU_TIME(START)
  SELECT CASE (SELF%LAST_CONTIGUOUS_DIMENSION)
#:for d in range (ft.rank + 1)
    CASE (${d}$)
      CALL ${ftn}$_COPY_DIM${d}$_CONTIGUOUS (SELF%PTR, SELF%DEVPTR, KDIR, QUEUE)
#:endfor
  END SELECT
  CALL CPU_TIME(FINISH)
  IF (KDIR == NH2D) THEN
    CALL SELF%STATS%INC_CPU_TO_GPU_TRANSFER(START, FINISH)
  ELSE IF (KDIR == ND2H) THEN
    CALL SELF%STATS%INC_GPU_TO_CPU_TRANSFER(START, FINISH)
  END IF

  END SUBROUTINE ${ftn}$_COPY_DATA


  SUBROUTINE ${ftn}$_GET_HOST_DATA (SELF, MODE, PTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER (KIND=JPIM),           INTENT(IN)    :: MODE

    ${ft.type}$, POINTER,          INTENT(INOUT) :: PTR(${ft.shape}$)
    INTEGER (KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    INTEGER(KIND=JPIM) :: LBOUNDS(${ft.rank}$)

    LBOUNDS=LBOUND(SELF%PTR)
    IF (IAND (SELF%GET_STATUS (), NHSTFRESH) == 0) THEN
      CALL SELF%COPY_DATA (ND2H, QUEUE)
      CALL SELF%SET_STATUS (IOR (SELF%GET_STATUS (), NHSTFRESH))
    ENDIF
    PTR (${ft.lbptr}$) => SELF%PTR (${','.join(':' for _ in range(ft.rank))}$)
    IF (IAND (MODE, NWR) /= 0) THEN
      CALL SELF%SET_STATUS (IAND (SELF%GET_STATUS (), NOT (NDEVFRESH)))
    ENDIF

  END SUBROUTINE ${ftn}$_GET_HOST_DATA

  SUBROUTINE ${ftn}$_OWNER_GET_HOST_DATA (SELF, MODE, PTR, QUEUE)
    CLASS(${ftn}$_OWNER) :: SELF
    INTEGER (KIND=JPIM),           INTENT(IN)    :: MODE
    ${ft.type}$, POINTER,          INTENT(INOUT) :: PTR(${ft.shape}$)
    INTEGER (KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    IF(SELF%GET_STATUS ()==UNALLOCATED)THEN
      CALL SELF%CREATE_HOST_DATA ()
      IF (SELF%HAS_INIT_VALUE) THEN
        SELF%PTR=SELF%INIT_VALUE
        CALL SELF%SET_STATUS (NHSTFRESH)
      ENDIF
    ENDIF
    CALL SELF%${ftn}$_GET_HOST_DATA(MODE, PTR, QUEUE)

  END SUBROUTINE ${ftn}$_OWNER_GET_HOST_DATA

  SUBROUTINE ${ftn}$_GET_HOST_DATA_RDONLY (SELF, PPTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    ${ft.type}$, POINTER,         INTENT(INOUT) :: PPTR(${ft.shape}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    CALL SELF%GET_HOST_DATA (NRD, PPTR, QUEUE)

  END SUBROUTINE ${ftn}$_GET_HOST_DATA_RDONLY

  SUBROUTINE ${ftn}$_SYNC_HOST_RDONLY (SELF, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE
    ${ft.type}$, POINTER                        :: ZPTR(${ft.shape}$)

    CALL SELF%GET_HOST_DATA_RDONLY (ZPTR, QUEUE)

  END SUBROUTINE ${ftn}$_SYNC_HOST_RDONLY

  SUBROUTINE ${ftn}$_GET_HOST_DATA_RDWR (SELF, PPTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    ${ft.type}$, POINTER,         INTENT(INOUT) :: PPTR(${ft.shape}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    CALL SELF%GET_HOST_DATA (IOR (NRD, NWR), PPTR, QUEUE)

  END SUBROUTINE ${ftn}$_GET_HOST_DATA_RDWR

  SUBROUTINE ${ftn}$_SYNC_HOST_RDWR (SELF, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE
    ${ft.type}$, POINTER                        :: ZPTR(${ft.shape}$)

    CALL SELF%GET_HOST_DATA_RDWR (ZPTR, QUEUE)

  END SUBROUTINE ${ftn}$_SYNC_HOST_RDWR

  SUBROUTINE ${ftn}$_CREATE_DEVICE_DATA (SELF)
    CLASS(${ftn}$) :: SELF

    IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
      CALL DEV_ALLOCATE_HST (DEV=SELF%DEVPTR, HST=SELF%PTR)
    ENDIF

  END SUBROUTINE

  SUBROUTINE ${ftn}$_GET_DEVICE_DATA (SELF, MODE, PTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER (KIND=JPIM),           INTENT(IN)    :: MODE
    ${ft.type}$, POINTER,          INTENT(INOUT) :: PTR(${ft.shape}$)
    INTEGER (KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE
    INTEGER(KIND=JPIM)                           :: LBOUNDS(${ft.rank}$)

    LBOUNDS=LBOUND(SELF%PTR)
    IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
      CALL SELF%CREATE_DEVICE_DATA
    ENDIF
    IF (IAND (SELF%GET_STATUS (), NDEVFRESH) == 0) THEN
      CALL SELF%COPY_DATA (NH2D, QUEUE)
      CALL SELF%SET_STATUS (IOR (SELF%GET_STATUS (), NDEVFRESH))
    ENDIF
    PTR (${ft.lbptr}$) => SELF%DEVPTR (${','.join(':' for _ in range(ft.rank))}$)
    IF (IAND (MODE, NWR) /= 0) THEN
      CALL SELF%SET_STATUS (IAND (SELF%GET_STATUS (), NOT (NHSTFRESH)))
    ENDIF

  END SUBROUTINE ${ftn}$_GET_DEVICE_DATA

  SUBROUTINE ${ftn}$_OWNER_GET_DEVICE_DATA (SELF, MODE, PTR, QUEUE)
    CLASS(${ftn}$_OWNER) :: SELF
    INTEGER (KIND=JPIM),           INTENT(IN)    :: MODE
    ${ft.type}$, POINTER,          INTENT(INOUT) :: PTR(${ft.shape}$)
    INTEGER (KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    IF(SELF%GET_STATUS ()==UNALLOCATED)THEN
      CALL SELF%CREATE_HOST_DATA ()
      IF (SELF%HAS_INIT_VALUE) THEN
        CALL SELF%CREATE_DEVICE_DATA
        SELF%PTR=SELF%INIT_VALUE
        CALL SELF%SET_STATUS (NHSTFRESH)
      ENDIF
    ENDIF
    CALL SELF%${ftn}$_GET_DEVICE_DATA(MODE, PTR, QUEUE)

  END SUBROUTINE ${ftn}$_OWNER_GET_DEVICE_DATA

  SUBROUTINE ${ftn}$_GET_DEVICE_DATA_RDONLY (SELF, PPTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    ${ft.type}$, POINTER,         INTENT(INOUT) :: PPTR(${ft.shape}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    CALL SELF%GET_DEVICE_DATA (NRD, PPTR, QUEUE)

  END SUBROUTINE ${ftn}$_GET_DEVICE_DATA_RDONLY

  SUBROUTINE ${ftn}$_SYNC_DEVICE_RDONLY (SELF, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE
    ${ft.type}$, POINTER                        :: ZPTR(${ft.shape}$)

    CALL SELF%GET_DEVICE_DATA_RDONLY (ZPTR, QUEUE)

  END SUBROUTINE ${ftn}$_SYNC_DEVICE_RDONLY

  SUBROUTINE ${ftn}$_GET_DEVICE_DATA_RDWR (SELF, PPTR, QUEUE)
    CLASS(${ftn}$) :: SELF
    ${ft.type}$, POINTER,         INTENT(INOUT) :: PPTR(${ft.shape}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE

    CALL SELF%GET_DEVICE_DATA (IOR (NRD, NWR), PPTR, QUEUE)

  END SUBROUTINE ${ftn}$_GET_DEVICE_DATA_RDWR

  SUBROUTINE ${ftn}$_SYNC_DEVICE_RDWR (SELF, QUEUE)
    CLASS(${ftn}$) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN)    :: QUEUE
    ${ft.type}$, POINTER                        :: ZPTR(${ft.shape}$)

    CALL SELF%GET_DEVICE_DATA_RDWR (ZPTR, QUEUE)

  END SUBROUTINE ${ftn}$_SYNC_DEVICE_RDWR

  SUBROUTINE ${ftn}$_WRAPPER_GET_DIMS (SELF, LBOUNDS, UBOUNDS)
    CLASS(${ftn}$_WRAPPER),       INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: LBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: UBOUNDS(${ft.rank}$)
    IF(PRESENT(LBOUNDS))THEN
      LBOUNDS=LBOUND(SELF%PTR)
    ENDIF
    IF(PRESENT(UBOUNDS))THEN
      UBOUNDS=UBOUND(SELF%PTR)
    ENDIF
  END SUBROUTINE ${ftn}$_WRAPPER_GET_DIMS

  SUBROUTINE ${ftn}$_OWNER_GET_DIMS (SELF, LBOUNDS, UBOUNDS)
    CLASS(${ftn}$_OWNER),         INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: LBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(OUT) :: UBOUNDS(${ft.rank}$)
    IF(PRESENT(LBOUNDS))THEN
      LBOUNDS=SELF%LBOUNDS
    ENDIF
    IF(PRESENT(UBOUNDS))THEN
      UBOUNDS=SELF%UBOUNDS
    ENDIF
  END SUBROUTINE ${ftn}$_OWNER_GET_DIMS

  SUBROUTINE ${ftn}$_WRAPPER_RESIZE (SELF, UBOUNDS, LBOUNDS, PERSISTENT)

    USE FIELD_ABORT_MODULE

    CLASS(${ftn}$_WRAPPER),       INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: UBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS(${ft.rank}$)
    LOGICAL, OPTIONAL,            INTENT(IN) :: PERSISTENT
    CALL FIELD_ABORT("RESIZE NOT IMPLMENTED FOR WRAPPER")
  END SUBROUTINE ${ftn}$_WRAPPER_RESIZE

  SUBROUTINE ${ftn}$_OWNER_RESIZE (SELF, UBOUNDS, LBOUNDS, PERSISTENT)
    CLASS(${ftn}$_OWNER),         INTENT(IN) :: SELF
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: UBOUNDS(${ft.rank}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS(${ft.rank}$)
    LOGICAL, OPTIONAL,            INTENT(IN) :: PERSISTENT

    LOGICAL :: DELAYED
    ${ft.type}$ :: INIT_VALUE

    DELAYED=.NOT. ASSOCIATED(SELF%PTR)
    INIT_VALUE=SELF%INIT_VALUE

    CALL SELF%FINAL
    CALL SELF%INIT(UBOUNDS=UBOUNDS, LBOUNDS=LBOUNDS, PERSISTENT=PERSISTENT, DELAYED=DELAYED, INIT_VALUE=INIT_VALUE)
  END SUBROUTINE ${ftn}$_OWNER_RESIZE

#:endfor

#ifdef __PGI
  SUBROUTINE ${ftn}$_SET_STATUS (SELF, KSTATUS)

  CLASS (${ftn}$) :: SELF
  INTEGER (KIND=JPIM), INTENT (IN) :: KSTATUS

  SELF%ISTATUS = KSTATUS

  END SUBROUTINE ${ftn}$_SET_STATUS

  SUBROUTINE ${ftn}$_SET_DEVICE_DIRTY (SELF)

  CLASS (${ftn}$) :: SELF

  IF (IAND (SELF%GET_STATUS (), NDEVFRESH)==NDEVFRESH) THEN
    CALL SELF%SET_STATUS (IAND (SELF%GET_STATUS (), NOT (NDEVFRESH)))
  ENDIF

  END SUBROUTINE 

  INTEGER (KIND=JPIM) FUNCTION ${ftn}$_GET_STATUS (SELF)

  CLASS (${ftn}$) :: SELF

  ${ftn}$_GET_STATUS = SELF%ISTATUS

  END FUNCTION

#endif

END MODULE FIELD_${RANK}$${SUFF}$_MODULE
