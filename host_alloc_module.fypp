#! (C) Copyright 2022- ECMWF.
#! (C) Copyright 2022- Meteo-France.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.

MODULE HOST_ALLOC_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (alias=False)

${fieldType.useParkind1 ()}$
USE ISO_C_BINDING
#:if defined('CUDA')
USE CUDAFOR
#:endif

IMPLICIT NONE

PRIVATE

INTERFACE HOST_ALLOC
#:for ft in fieldTypeList
  MODULE PROCEDURE ${ft.name}$_HOST_ALLOC
#:endfor
END INTERFACE HOST_ALLOC

INTERFACE HOST_DEALLOC
#:for ft in fieldTypeList
  MODULE PROCEDURE ${ft.name}$_HOST_DEALLOC
#:endfor
END INTERFACE HOST_DEALLOC

INTERFACE
  SUBROUTINE C_MALLOC (SIZ, PTR) BIND (C, NAME='c_malloc')
    IMPORT :: C_PTR, C_SIZE_T
    INTEGER (C_SIZE_T), VALUE, INTENT(IN) :: SIZ
    TYPE (C_PTR), INTENT(OUT) :: PTR
  END SUBROUTINE C_MALLOC
  SUBROUTINE C_FREE (PTR) BIND (C, NAME='c_free')
    IMPORT :: C_PTR
    TYPE (C_PTR), VALUE, INTENT(IN) :: PTR
  END SUBROUTINE C_FREE
END INTERFACE

PUBLIC :: HOST_ALLOC
PUBLIC :: HOST_DEALLOC

CONTAINS

#:for ft in fieldTypeList
SUBROUTINE ${ft.name}$_HOST_ALLOC (HST, LBOUNDS, UBOUNDS, PINNED)

   USE FIELD_STATISTICS_MODULE

   USE FIELD_ABORT_MODULE

   ${ft.type}$, POINTER, INTENT(OUT) :: HST(${ft.shape}$)
   INTEGER(KIND=JPIM), INTENT(IN) :: LBOUNDS(${ft.rank}$)
   INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS(${ft.rank}$)
   LOGICAL, INTENT(IN) :: PINNED

   ${ft.type}$, POINTER :: PTR(${ft.shape}$)
   TYPE(C_PTR) :: DATA
   INTEGER(C_SIZE_T) :: ARR_SIZE
   INTEGER :: ISHAPE(${ft.rank}$), ISTAT
#include "abor1.intfb.h"

   ARR_SIZE = KIND(HST)
#:for r in range(ft.rank)
   ISHAPE(${r+1}$) = UBOUNDS(${r+1}$) - LBOUNDS(${r+1}$) + 1
   ARR_SIZE = ARR_SIZE * ISHAPE(${r+1}$)
#:endfor

   IF(ARR_SIZE > 0)THEN
     CALL C_MALLOC(ARR_SIZE, DATA)

#:if defined('CUDA')
     IF(PINNED)THEN
       ISTAT = CUDAHOSTREGISTER (DATA, ARR_SIZE, CUDAHOSTREGISTERMAPPED)
       IF (ISTAT /= 0) THEN
         CALL FIELD_ABORT ("${ft.name}$_OWNER: FAILED TO REGISTER IN PAGE-LOCKED MEMORY")
       ENDIF
     ENDIF
#:endif

     CALL C_F_POINTER(DATA, PTR, SHAPE=ISHAPE)
     HST(${', '.join(map(lambda r: 'LBOUNDS('+str(r+1)+'):', range(0, ft.rank)))}$) => PTR
   ELSE
     ALLOCATE(HST(${','.join([f'LBOUNDS({r+1}):UBOUNDS({r+1})' for r in range(ft.rank)])}$))
   ENDIF

   IF (FIELD_STATISTICS_ENABLE) CALL FIELD_STATISTICS_HOST_ALLOCATE (SIZE (HST, KIND=JPIB) * INT (KIND (HST), KIND=JPIB))

END SUBROUTINE ${ft.name}$_HOST_ALLOC

SUBROUTINE ${ft.name}$_HOST_DEALLOC(HST, PINNED)

   USE FIELD_STATISTICS_MODULE

   USE FIELD_ABORT_MODULE

   ${ft.type}$, POINTER, INTENT(INOUT) :: HST(${ft.shape}$)
   LOGICAL, INTENT (IN) :: PINNED

   TYPE(C_PTR) :: DATA
   INTEGER :: ISTAT
  
   IF (FIELD_STATISTICS_ENABLE) CALL FIELD_STATISTICS_HOST_DEALLOCATE (SIZE (HST, KIND=JPIB) * INT (KIND (HST), KIND=JPIB))

   IF(SIZE(HST) > 0)THEN
     DATA = C_LOC (HST (${ ', '.join (map (lambda i: 'LBOUND (HST, ' + str (i) + ')', range (1, ft.rank+1))) }$))

#:if defined('CUDA')
     IF (PINNED) THEN
       ISTAT = CUDAHOSTUNREGISTER (DATA)
       IF (ISTAT /= 0) THEN
         CALL FIELD_ABORT ("${ft.name}$_OWNER: FAILED TO UNREGISTER PAGE-LOCKED MEMORY")
       ENDIF
     ENDIF
#:endif

     CALL C_FREE(DATA)
   ELSE
     DEALLOCATE(HST)
   ENDIF

   NULLIFY(HST)

END SUBROUTINE ${ft.name}$_HOST_DEALLOC

#:endfor

END MODULE HOST_ALLOC_MODULE
